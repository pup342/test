- создание и удаление локального и удаленного репозитория
- git clone -o (дать имя удаленного репозитория для локального)
- вывести имя и емейл из конфига
- изменить имя репозитория
- узнать статус репозитория, так же сокращенный вариант
- начать отслеживать новый файл
- сделать индексацию измененного файла
- сделать модификацию и индексацию и еще раз модификацию, посмотреть как это выглядит
- открыть в bash содержимое файла (cat)
- посмотреть основы gitignore
- просмотр индексированных и неиндексированных изменений
- провести коммит (добавить комментарий через блокнот (и вынести diff в него через -v) или через -m)
- игнорирование индексации при выполнении комита (-a)
- удаление файлов из репозитория (простое удаление из папки и через -rm); удаление индексированного файла -f;
	удаление файла из репозитория, но оставить его на жестком диске (добавить --cached)
- переименование файлов через папку и через -mv
- просмотр изменения текущей или другой ветки (log, log <name_branch>, просмотр изменений всех веток (log --all)
-p, -количество найденных коммитов (цифра), --stat, --author, --committer, --grep, -S,
	-- /путь до файла, название файла (вывод коммитов, где изменялся указанный файл (вводится в самом конце))
- внесение правок в последний коммит (--amend)
- отмена индескации файла, отмена изменений в файле (делать через restore!)
- просмотр удаленных репозиториев (-remote, -v), добавление отслеживаемых удаленных репозиториев
- просмотр детальной информации об удаленном репозитории (git remote show)
- замержить свою ветку с другой веткой из основного, удаленного, url репозитория (через fetch и merge)
- автоматически получить изменения из удалённой ветки (основной, отслеживоемой, url) и слить их со своей текущей веткой (pull)
- внести изменения в удалённую ветку (основную, отслеживоемую, url) (push)
- переименование удаленного репозитория (remote rename) (переименование идет для локального гита, а не для удаленного)
- удаление удаленного репозитория из отслеживаемых (remote remove) (сам удаленненный репозиторий не удалиться,
	просто перестанет отслеживаться локально)
- просмотр списка тегов (tag), создать аннотированный тег (-a) и легковесный тег (указать только название тега) на последний
	и какой-нибудь старый коммит (через контрольную сумму)
- просмотр подробных сведений о теге и коммите (show)
- отправка одного или всех тегов на удаленный репозиторий (push, --tags) и на локальный (pull)
- удаление тегов с локального (tag -d) и удаленного репозитория (push, --delete) 
	(необходимо удалять теги отдельно и с локального и удаленного репозитория, они не синхронизируются через push или pull)
- получить версии файлов определенного комита или тега
	(git switch <контрольная сумма> или <тег> --detach или checkout <контрольная сумма> или <тег>)
	если необходимо работать с файлами определенного комита или тега, то нужно создать новую ветку и работать в ней
	(git switch -c <new_branch_name> или git checkout -b <name_new_branch>);
	если работать с файлами комита или тега не нужно, то необходимо вернуться обратно на рабочую ветку (git switch -)
- создать новую ветку (branch), переключится на другую ветку (switch или checkout);
	создать новую ветку и сразу переключиться на нее (git switch -c <new_branch_name> или git checkout -b <new_branch_name>)
- выполнить слияние веток (перейти в ветку, где будет зафиксированно слияние, merge <name_merge_branch>)
- удаление ветки (branch -d)
- вывести список локальных и удаленных веток (branch, --all), вывести последние комиты у всех веток (-v), 
	вывод замерженных и незамерженных веток относительно текущей и другой ветки (--merged, --no-merged, <name_branch>)
	незамерженные ветки нельзя удалить (можно удалить если использивать опцию -D)
- переименование ветки в локальном и удаленном репозитории  (git branch --move, запушить через --set-upstream и удалить ветку со старым названием)
	!
	Не переименовывайте ветки, которые всё ещё используются другими участниками. 
	Не переименовывайте ветку в master/main/mainline, не прочитав раздел «Изменение имени главной ветки».
	!
- 